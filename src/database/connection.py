"""
–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
"""
import asyncio
import logging
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from sqlalchemy.pool import NullPool

from src.shared.config import settings
from src.database.models import Base

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–≤–∏–∂–∫–∞ –∏ —Å–µ—Å—Å–∏–π
engine = None
async_session = None


async def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    global engine, async_session
    
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        engine = create_async_engine(
            settings.DATABASE_URL,
            echo=settings.DEBUG,
            future=True,
            pool_size=settings.DB_POOL_SIZE,
            max_overflow=settings.DB_MAX_OVERFLOW,
            pool_pre_ping=True,
            pool_recycle=3600,  # 1 —á–∞—Å
            connect_args={
                "command_timeout": 60,
                "server_settings": {
                    "application_name": "telegram_ai_bot",
                    "jit": "off"
                }
            }
        )
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Å—Å–∏–π
        async_session = sessionmaker(
            engine, 
            class_=AsyncSession,
            expire_on_commit=False
        )
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
        
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        async with async_session() as session:
            await session.execute("SELECT 1")
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise


async def close_database():
    """–ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    global engine
    
    if engine:
        await engine.dispose()
        logger.info("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")


def get_session() -> AsyncSession:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    if not async_session:
        raise RuntimeError("Database not initialized. Call init_database() first.")
    
    return async_session()


async def health_check() -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        async with get_session() as session:
            result = await session.execute("SELECT 1 as health")
            return result.scalar() == 1
    except Exception as e:
        logger.error(f"Database health check failed: {e}")
        return False


class DatabaseManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.engine = None
        self.session_factory = None
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        await init_database()
        self.engine = engine
        self.session_factory = async_session
    
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        await close_database()
    
    async def create_session(self) -> AsyncSession:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
        if not self.session_factory:
            await self.initialize()
        return self.session_factory()
    
    async def execute_transaction(self, operations):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        async with self.create_session() as session:
            try:
                async with session.begin():
                    result = await operations(session)
                    return result
            except Exception as e:
                await session.rollback()
                logger.error(f"Transaction failed: {e}")
                raise
    
    async def get_database_info(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            async with self.create_session() as session:
                # –í–µ—Ä—Å–∏—è PostgreSQL
                result = await session.execute("SELECT version()")
                version = result.scalar()
                
                # –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                result = await session.execute(
                    "SELECT pg_size_pretty(pg_database_size(current_database()))"
                )
                size = result.scalar()
                
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
                result = await session.execute(
                    "SELECT count(*) FROM pg_stat_activity WHERE datname = current_database()"
                )
                connections = result.scalar()
                
                return {
                    "version": version,
                    "size": size,
                    "connections": connections,
                    "status": "healthy"
                }
        except Exception as e:
            logger.error(f"Failed to get database info: {e}")
            return {"status": "error", "error": str(e)}


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
db_manager = DatabaseManager()


# Context manager –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏
class DatabaseSession:
    """Context manager –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Å—Å–∏—è–º–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.session = None
    
    async def __aenter__(self) -> AsyncSession:
        self.session = get_session()
        return self.session
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            if exc_type:
                await self.session.rollback()
            else:
                await self.session.commit()
            await self.session.close()


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Å—Å–∏–π
def with_database_session(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Å—Å–∏–π –ë–î"""
    async def wrapper(*args, **kwargs):
        async with DatabaseSession() as session:
            return await func(*args, session=session, **kwargs)
    return wrapper


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–π
async def create_migration_table():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –º–∏–≥—Ä–∞—Ü–∏–π"""
    async with get_session() as session:
        await session.execute("""
            CREATE TABLE IF NOT EXISTS migrations (
                id SERIAL PRIMARY KEY,
                name VARCHAR(255) NOT NULL UNIQUE,
                applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)
        await session.commit()


async def apply_migration(migration_name: str, migration_sql: str):
    """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    async with get_session() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞
        result = await session.execute(
            "SELECT id FROM migrations WHERE name = :name",
            {"name": migration_name}
        )
        
        if result.scalar():
            logger.info(f"Migration {migration_name} already applied")
            return
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
            await session.execute(migration_sql)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É –º–∏–≥—Ä–∞—Ü–∏–π
            await session.execute(
                "INSERT INTO migrations (name) VALUES (:name)",
                {"name": migration_name}
            )
            
            await session.commit()
            logger.info(f"‚úÖ Migration {migration_name} applied successfully")
            
        except Exception as e:
            await session.rollback()
            logger.error(f"‚ùå Failed to apply migration {migration_name}: {e}")
            raise


async def get_applied_migrations():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π"""
    try:
        async with get_session() as session:
            result = await session.execute(
                "SELECT name, applied_at FROM migrations ORDER BY applied_at"
            )
            return result.fetchall()
    except Exception as e:
        logger.error(f"Failed to get migrations: {e}")
        return []


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±–µ–∫–∞–ø–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
async def backup_database(backup_path: str):
    """–°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∫–∞–ø–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    import subprocess
    import os
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ URL
        from urllib.parse import urlparse
        parsed = urlparse(settings.DATABASE_URL.replace("postgresql+asyncpg://", "postgresql://"))
        
        env = os.environ.copy()
        env['PGPASSWORD'] = parsed.password
        
        command = [
            'pg_dump',
            '-h', parsed.hostname,
            '-p', str(parsed.port or 5432),
            '-U', parsed.username,
            '-d', parsed.path[1:],  # –£–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π '/'
            '-f', backup_path,
            '--verbose',
            '--no-owner',
            '--no-privileges'
        ]
        
        result = subprocess.run(command, env=env, capture_output=True, text=True)
        
        if result.returncode == 0:
            logger.info(f"‚úÖ Database backup created: {backup_path}")
            return True
        else:
            logger.error(f"‚ùå Backup failed: {result.stderr}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Backup error: {e}")
        return False


# –§—É–Ω–∫—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
async def get_database_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        async with get_session() as session:
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü
            tables_stats = await session.execute("""
                SELECT 
                    schemaname,
                    tablename,
                    n_tup_ins,
                    n_tup_upd,
                    n_tup_del,
                    n_live_tup,
                    n_dead_tup
                FROM pg_stat_user_tables
                ORDER BY n_live_tup DESC
            """)
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
            connections_stats = await session.execute("""
                SELECT 
                    count(*) as total_connections,
                    count(*) FILTER (WHERE state = 'active') as active_connections,
                    count(*) FILTER (WHERE state = 'idle') as idle_connections
                FROM pg_stat_activity 
                WHERE datname = current_database()
            """)
            
            # –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            db_size = await session.execute("""
                SELECT 
                    pg_size_pretty(pg_database_size(current_database())) as db_size,
                    pg_database_size(current_database()) as db_size_bytes
            """)
            
            return {
                "tables": tables_stats.fetchall(),
                "connections": connections_stats.fetchone(),
                "size": db_size.fetchone()
            }
            
    except Exception as e:
        logger.error(f"Failed to get database stats: {e}")
        return None