"""
Web App –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π
"""
import json
import logging
from datetime import datetime
from aiohttp import web
from aiohttp.web import RouteTableDef

from src.shared.config import settings, PACKAGES
from src.payment.providers.yookassa import YooKassaProvider
from src.database.crud import UserCRUD, PaymentCRUD

logger = logging.getLogger(__name__)
routes = RouteTableDef()

# –°–µ—Ä–≤–∏—Å—ã
yookassa_provider = YooKassaProvider()
user_crud = UserCRUD()
payment_crud = PaymentCRUD()


def setup_webapp_routes(app: web.Application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è Web App"""
    app.router.add_routes(routes)


@routes.get('/webapp/payment/{package}')
async def payment_webapp(request: web.Request):
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ Web App –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
    package = request.match_info['package']
    
    if package not in PACKAGES:
        raise web.HTTPNotFound(text="Package not found")
    
    package_info = PACKAGES[package]
    
    # HTML —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
    html_content = f"""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–û–ø–ª–∞—Ç–∞ - {package_info['name']}</title>
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <style>
        * {{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }}
        
        body {{
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: var(--tg-theme-bg-color, #ffffff);
            color: var(--tg-theme-text-color, #333333);
            padding: 20px;
            min-height: 100vh;
        }}
        
        .container {{
            max-width: 400px;
            margin: 0 auto;
        }}
        
        .package-card {{
            background: var(--tg-theme-secondary-bg-color, #f8f9fa);
            border-radius: 16px;
            padding: 24px;
            margin-bottom: 20px;
            box-shadow: 0 2px 12px rgba(0,0,0,0.08);
        }}
        
        .package-title {{
            font-size: 24px;
            font-weight: bold;
            margin-bottom: 8px;
            color: var(--tg-theme-text-color, #333);
        }}
        
        .package-price {{
            font-size: 32px;
            font-weight: bold;
            color: var(--tg-theme-button-color, #007AFF);
            margin-bottom: 16px;
        }}
        
        .package-description {{
            font-size: 16px;
            color: var(--tg-theme-hint-color, #666);
            margin-bottom: 20px;
            line-height: 1.4;
        }}
        
        .features {{
            list-style: none;
            margin-bottom: 24px;
        }}
        
        .features li {{
            padding: 8px 0;
            display: flex;
            align-items: center;
            font-size: 14px;
        }}
        
        .features li::before {{
            content: "‚úÖ";
            margin-right: 12px;
        }}
        
        .payment-methods {{
            display: grid;
            gap: 12px;
        }}
        
        .payment-btn {{
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 16px;
            border: none;
            border-radius: 12px;
            font-size: 16px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
            text-decoration: none;
            color: white;
        }}
        
        .payment-btn:hover {{
            transform: translateY(-1px);
            box-shadow: 0 4px 16px rgba(0,0,0,0.15);
        }}
        
        .payment-btn.card {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }}
        
        .payment-btn.sbp {{
            background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
        }}
        
        .payment-btn.sber {{
            background: linear-gradient(135deg, #21D190 0%, #128C7E 100%);
        }}
        
        .payment-btn.yoomoney {{
            background: linear-gradient(135deg, #8B5CF6 0%, #A855F7 100%);
        }}
        
        .loading {{
            display: none;
            text-align: center;
            padding: 40px;
        }}
        
        .spinner {{
            border: 4px solid #f3f3f3;
            border-top: 4px solid var(--tg-theme-button-color, #007AFF);
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 16px;
        }}
        
        @keyframes spin {{
            0% {{ transform: rotate(0deg); }}
            100% {{ transform: rotate(360deg); }}
        }}
        
        .security-info {{
            background: var(--tg-theme-secondary-bg-color, #f8f9fa);
            border-radius: 12px;
            padding: 16px;
            margin-top: 20px;
            font-size: 12px;
            color: var(--tg-theme-hint-color, #666);
            text-align: center;
        }}
        
        .error {{
            background: #fee;
            border: 1px solid #fcc;
            color: #c00;
            padding: 16px;
            border-radius: 12px;
            margin: 16px 0;
            display: none;
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="package-card">
            <h1 class="package-title">{package_info['name']}</h1>
            <div class="package-price">{package_info['price']}‚ÇΩ</div>
            <p class="package-description">{package_info['description']}</p>
            
            <ul class="features">
                <li>{package_info['images']} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</li>
                <li>–í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ RTX 5080</li>
                <li>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö —Å—Ç–∏–ª–µ–π</li>
                {"<li>–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ—á–µ—Ä–µ–¥—å</li>" if package in ['premium', 'pro'] else ""}
                {"<li>–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏</li>" if package == 'pro' else ""}
                <li>–§–∏—Å–∫–∞–ª—å–Ω—ã–π —á–µ–∫ –ø–æ 54-–§–ó</li>
            </ul>
        </div>
        
        <div id="payment-form">
            <div class="payment-methods">
                <button class="payment-btn card" onclick="startPayment('card')">
                    üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞
                </button>
                <button class="payment-btn sbp" onclick="startPayment('sbp')">
                    üì± –°–ë–ü - –ë—ã—Å—Ç—Ä—ã–µ –ø–ª–∞—Ç–µ–∂–∏
                </button>
                <button class="payment-btn sber" onclick="startPayment('sber')">
                    üü¢ SberPay
                </button>
                <button class="payment-btn yoomoney" onclick="startPayment('yoomoney')">
                    üü° –ÆMoney
                </button>
            </div>
        </div>
        
        <div id="loading" class="loading">
            <div class="spinner"></div>
            <p>–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂...</p>
        </div>
        
        <div id="error" class="error">
            <strong>–û—à–∏–±–∫–∞:</strong>
            <span id="error-text"></span>
        </div>
        
        <div class="security-info">
            üîí <strong>–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–ª–∞—Ç–∞</strong><br>
            –í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –∑–∞—â–∏—â–µ–Ω—ã –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É PCI DSS Level 1<br>
            –î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç —à–∏—Ñ—Ä—É—é—Ç—Å—è –∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è
        </div>
    </div>

    <script>
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
        let tg = window.Telegram?.WebApp;
        if (tg) {{
            tg.ready();
            tg.expand();
        }}
        
        const package = '{package}';
        
        function showLoading() {{
            document.getElementById('payment-form').style.display = 'none';
            document.getElementById('loading').style.display = 'block';
        }}
        
        function hideLoading() {{
            document.getElementById('payment-form').style.display = 'block';
            document.getElementById('loading').style.display = 'none';
        }}
        
        function showError(message) {{
            const errorDiv = document.getElementById('error');
            const errorText = document.getElementById('error-text');
            errorText.textContent = message;
            errorDiv.style.display = 'block';
            hideLoading();
        }}
        
        async function startPayment(method) {{
            showLoading();
            
            try {{
                // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
                const userInfo = tg?.initDataUnsafe?.user || {{}};
                
                // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
                const response = await fetch('/api/payment/create', {{
                    method: 'POST',
                    headers: {{
                        'Content-Type': 'application/json',
                        'X-Telegram-Init-Data': tg?.initData || ''
                    }},
                    body: JSON.stringify({{
                        package: package,
                        method: method,
                        user_info: userInfo,
                        return_url: window.location.href
                    }})
                }});
                
                const result = await response.json();
                
                if (response.ok && result.success) {{
                    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã
                    if (result.payment_url) {{
                        if (tg) {{
                            tg.openLink(result.payment_url);
                        }} else {{
                            window.open(result.payment_url, '_blank');
                        }}
                    }}
                }} else {{
                    showError(result.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂');
                }}
                
            }} catch (error) {{
                console.error('Payment error:', error);
                showError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞');
            }}
        }}
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è WebApp
        if (tg) {{
            tg.onEvent('webAppClose', function() {{
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –±–æ—Ç–∞ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ WebApp
                fetch('/api/webapp/close', {{
                    method: 'POST',
                    headers: {{
                        'Content-Type': 'application/json',
                        'X-Telegram-Init-Data': tg.initData
                    }},
                    body: JSON.stringify({{ package: package }})
                }}).catch(console.error);
            }});
        }}
    </script>
</body>
</html>
"""
    
    return web.Response(text=html_content, content_type='text/html')


@routes.post('/api/payment/create')
async def create_payment_api(request: web.Request):
    """API —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        data = await request.json()
        package = data.get('package')
        method = data.get('method')
        user_info = data.get('user_info', {})
        return_url = data.get('return_url')
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è
        if package not in PACKAGES:
            return web.json_response({
                'success': False,
                'error': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞–∫–µ—Ç'
            }, status=400)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = user_info.get('id')
        if not user_id:
            return web.json_response({
                'success': False,
                'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
            }, status=400)
        
        user = await user_crud.get_or_create_user(
            telegram_id=user_id,
            username=user_info.get('username'),
            first_name=user_info.get('first_name', 'Unknown'),
            last_name=user_info.get('last_name'),
            language_code=user_info.get('language_code', 'ru')
        )
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        payment_result = await yookassa_provider.create_payment(
            user_id=user_id,
            package=package,
            return_url=return_url
        )
        
        return web.json_response({
            'success': True,
            'payment_id': payment_result['payment_id'],
            'payment_url': payment_result['confirmation_url'],
            'amount': payment_result['amount']
        })
        
    except Exception as e:
        logger.error(f"Error creating payment: {e}")
        return web.json_response({
            'success': False,
            'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        }, status=500)


@routes.get('/webapp/success')
async def payment_success_webapp(request: web.Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""
    payment_id = request.query.get('payment_id', 'unknown')
    
    html_content = f"""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!</title>
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <style>
        body {{
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: var(--tg-theme-bg-color, #ffffff);
            color: var(--tg-theme-text-color, #333333);
            padding: 20px;
            text-align: center;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }}
        
        .success-container {{
            max-width: 400px;
            background: var(--tg-theme-secondary-bg-color, #f8f9fa);
            border-radius: 20px;
            padding: 40px 20px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        }}
        
        .success-icon {{
            font-size: 64px;
            margin-bottom: 20px;
        }}
        
        .success-title {{
            font-size: 24px;
            font-weight: bold;
            margin-bottom: 16px;
            color: #22c55e;
        }}
        
        .success-message {{
            font-size: 16px;
            color: var(--tg-theme-hint-color, #666);
            line-height: 1.5;
            margin-bottom: 30px;
        }}
        
        .payment-info {{
            background: white;
            border-radius: 12px;
            padding: 16px;
            margin-bottom: 20px;
        }}
        
        .close-btn {{
            background: var(--tg-theme-button-color, #007AFF);
            color: white;
            border: none;
            border-radius: 12px;
            padding: 16px 32px;
            font-size: 16px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
        }}
        
        .close-btn:hover {{
            transform: translateY(-1px);
            box-shadow: 0 4px 16px rgba(0,123,255,0.3);
        }}
    </style>
</head>
<body>
    <div class="success-container">
        <div class="success-icon">‚úÖ</div>
        <h1 class="success-title">–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!</h1>
        <p class="success-message">
            –í–∞—à –ø–ª–∞—Ç–µ–∂ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.<br>
            –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å.<br>
            –§–∏—Å–∫–∞–ª—å–Ω—ã–π —á–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email.
        </p>
        <div class="payment-info">
            <small>ID –ø–ª–∞—Ç–µ–∂–∞: {payment_id}</small>
        </div>
        <button class="close-btn" onclick="closeWebApp()">
            –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–æ—Ç
        </button>
    </div>

    <script>
        let tg = window.Telegram?.WebApp;
        if (tg) {{
            tg.ready();
            tg.expand();
        }}
        
        function closeWebApp() {{
            if (tg) {{
                tg.close();
            }} else {{
                window.close();
            }}
        }}
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        setTimeout(closeWebApp, 10000);
    </script>
</body>
</html>
"""
    
    return web.Response(text=html_content, content_type='text/html')


@routes.post('/api/webapp/close')
async def webapp_close_api(request: web.Request):
    """API —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫—Ä—ã—Ç–∏–∏ WebApp"""
    try:
        data = await request.json()
        logger.info(f"WebApp closed for package: {data.get('package')}")
        return web.json_response({'success': True})
    except Exception as e:
        logger.error(f"WebApp close error: {e}")
        return web.json_response({'success': False}, status=500)


@routes.get('/webapp/error')
async def payment_error_webapp(request: web.Request):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—à–∏–±–∫–∏ –æ–ø–ª–∞—Ç—ã"""
    error_message = request.query.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
    
    html_content = f"""
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã</title>
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <style>
        body {{
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: var(--tg-theme-bg-color, #ffffff);
            color: var(--tg-theme-text-color, #333333);
            padding: 20px;
            text-align: center;
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
        }}
        
        .error-container {{
            max-width: 400px;
            background: var(--tg-theme-secondary-bg-color, #f8f9fa);
            border-radius: 20px;
            padding: 40px 20px;
            box-shadow: 0 4px 20px rgba(0,0,0,0.1);
        }}
        
        .error-icon {{
            font-size: 64px;
            margin-bottom: 20px;
        }}
        
        .error-title {{
            font-size: 24px;
            font-weight: bold;
            margin-bottom: 16px;
            color: #ef4444;
        }}
        
        .error-message {{
            font-size: 16px;
            color: var(--tg-theme-hint-color, #666);
            line-height: 1.5;
            margin-bottom: 30px;
        }}
        
        .retry-btn {{
            background: var(--tg-theme-button-color, #007AFF);
            color: white;
            border: none;
            border-radius: 12px;
            padding: 16px 32px;
            font-size: 16px;
            font-weight: 500;
            cursor: pointer;
            margin: 8px;
            transition: all 0.2s ease;
        }}
        
        .close-btn {{
            background: #6b7280;
            color: white;
            border: none;
            border-radius: 12px;
            padding: 16px 32px;
            font-size: 16px;
            font-weight: 500;
            cursor: pointer;
            margin: 8px;
            transition: all 0.2s ease;
        }}
    </style>
</head>
<body>
    <div class="error-container">
        <div class="error-icon">‚ùå</div>
        <h1 class="error-title">–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã</h1>
        <p class="error-message">
            {error_message}<br><br>
            –°—Ä–µ–¥—Å—Ç–≤–∞ –Ω–µ –±—ã–ª–∏ —Å–ø–∏—Å–∞–Ω—ã.<br>
            –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.
        </p>
        <button class="retry-btn" onclick="goBack()">
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        </button>
        <button class="close-btn" onclick="closeWebApp()">
            –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –±–æ—Ç
        </button>
    </div>

    <script>
        let tg = window.Telegram?.WebApp;
        if (tg) {{
            tg.ready();
            tg.expand();
        }}
        
        function goBack() {{
            window.history.back();
        }}
        
        function closeWebApp() {{
            if (tg) {{
                tg.close();
            }} else {{
                window.close();
            }}
        }}
    </script>
</body>
</html>
"""
    
    return web.Response(text=html_content, content_type='text/html')