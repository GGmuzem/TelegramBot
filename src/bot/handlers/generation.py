"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
"""
import json
import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from src.bot.keyboards.main import (
    get_generation_keyboard, get_generation_result_keyboard,
    get_style_selection_keyboard, get_quality_selection_keyboard
)
from src.database.crud import UserCRUD, GenerationCRUD
from src.shared.redis_client import redis_client
from src.shared.config import QUALITY_SETTINGS, IMAGE_STYLES

logger = logging.getLogger(__name__)
router = Router()

# CRUD —Å–µ—Ä–≤–∏—Å—ã
user_crud = UserCRUD()
generation_crud = GenerationCRUD()


# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class GenerationStates(StatesGroup):
    waiting_prompt = State()
    selecting_style = State()
    selecting_quality = State()
    processing = State()


@router.callback_query(F.data == "generate_image")
async def generate_image_handler(callback: CallbackQuery, user: dict, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        if user['balance'] <= 0:
            from src.bot.keyboards.payment import get_buy_packages_keyboard
            keyboard = get_buy_packages_keyboard()
            
            await callback.message.edit_text(
                "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ!</b>\n\n"
                "–î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å.\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω –Ω–∏–∂–µ.",
                reply_markup=keyboard
            )
            await callback.answer()
            return
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞
        await state.set_state(GenerationStates.waiting_prompt)
        
        prompt_text = f"""
üé® <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</b>

üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {user['balance']} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

üìù <b>–ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:</b>

üéØ <b>–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:</b>
‚Ä¢ "–ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –º–æ—Ä–µ–º –≤ —Å—Ç–∏–ª–µ –∏–º–ø—Ä–µ—Å—Å–∏–æ–Ω–∏–∑–º–∞"
‚Ä¢ "–ü–æ—Ä—Ç—Ä–µ—Ç –¥–µ–≤—É—à–∫–∏ —Å –≥–æ–ª—É–±—ã–º–∏ –≥–ª–∞–∑–∞–º–∏, —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ"
‚Ä¢ "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∞–±–ª—å –≤ —Å—Ç–∏–ª–µ –∫–∏–±–µ—Ä–ø–∞–Ω–∫, –Ω–µ–æ–Ω–æ–≤—ã–µ —Ü–≤–µ—Ç–∞"
‚Ä¢ "–ú–∏–ª—ã–π –∫–æ—Ç–µ–Ω–æ–∫ –≤ —Å—Ç–∏–ª–µ –∞–Ω–∏–º–µ"

‚öôÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏:</b>
‚Ä¢ –†–µ–∞–ª–∏–∑–º (photorealistic)
‚Ä¢ –ê–Ω–∏–º–µ (anime style)
‚Ä¢ –¶–∏—Ñ—Ä–æ–≤–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ (digital art)
‚Ä¢ –ü–æ—Ä—Ç—Ä–µ—Ç (portrait)
‚Ä¢ –ü–µ–π–∑–∞–∂ (landscape)
‚Ä¢ –ê–±—Å—Ç—Ä–∞–∫—Ü–∏—è (abstract)

‚ú® <b>–°–æ–≤–µ—Ç—ã:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è
‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Å—Ç–∏–ª—å –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
‚Ä¢ –ú–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
‚Ä¢ –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–µ–º –ª—É—á—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç

üí¨ <b>–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b>
"""
        
        from src.bot.keyboards.main import get_back_keyboard
        keyboard = get_back_keyboard()
        
        await callback.message.edit_text(prompt_text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ generate_image_handler: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.message(GenerationStates.waiting_prompt)
async def process_generation_prompt(message: Message, user: dict, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    try:
        prompt = message.text.strip()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞
        if len(prompt) < 3:
            await message.answer(
                "‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –ù–∞–ø–∏—à–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å."
            )
            return
        
        if len(prompt) > 500:
            await message.answer(
                "‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤."
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –µ—â–µ —Ä–∞–∑
        fresh_user = await user_crud.get_by_telegram_id(user['telegram_id'])
        if not fresh_user or fresh_user.balance <= 0:
            await message.answer(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."
            )
            await state.clear()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(prompt=prompt)
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å
        style_keyboard = get_style_selection_keyboard()
        
        style_text = f"""
üé® <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:</b>

üìù <b>–í–∞—à –∑–∞–ø—Ä–æ—Å:</b> {prompt[:100]}{'...' if len(prompt) > 100 else ''}

üé≠ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏:</b>
‚Ä¢ üì∑ <b>–†–µ–∞–ª–∏–∑–º</b> - —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
‚Ä¢ üéå <b>–ê–Ω–∏–º–µ</b> - —è–ø–æ–Ω—Å–∫–∞—è –º—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ü–∏—è
‚Ä¢ üé® <b>–¶–∏—Ñ—Ä–æ–≤–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ</b> - —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
‚Ä¢ üë§ <b>–ü–æ—Ä—Ç—Ä–µ—Ç</b> - —Ñ–æ–∫—É—Å –Ω–∞ –ª–∏—Ü–∞—Ö –ª—é–¥–µ–π
‚Ä¢ üèûÔ∏è <b>–ü–µ–π–∑–∞–∂</b> - –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ –≤–∏–¥—ã
‚Ä¢ üåÄ <b>–ê–±—Å—Ç—Ä–∞–∫—Ü–∏—è</b> - –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ

–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –Ω–∏–∂–µ ‚¨áÔ∏è
"""
        
        await state.set_state(GenerationStates.selecting_style)
        await message.answer(style_text, reply_markup=style_keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_generation_prompt: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        await state.clear()


@router.callback_query(GenerationStates.selecting_style, F.data.startswith("style_"))
async def process_style_selection(callback: CallbackQuery, user: dict, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è"""
    try:
        style = callback.data.replace("style_", "")
        await state.update_data(style=style)
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ
        quality_keyboard = get_quality_selection_keyboard()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–¥–ø–∏—Å–∫–∏
        available_qualities = ["fast", "standard"]
        
        if user.get('subscription_type') in ["premium", "pro"]:
            available_qualities.append("high")
        
        if user.get('subscription_type') == "pro":
            available_qualities.append("ultra")
        
        data = await state.get_data()
        prompt = data.get('prompt', '')
        
        quality_text = f"""
‚öôÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:</b>

üìù <b>–ó–∞–ø—Ä–æ—Å:</b> {prompt[:80]}{'...' if len(prompt) > 80 else ''}
üé® <b>–°—Ç–∏–ª—å:</b> {IMAGE_STYLES.get(style, {}).get('name', style)}

üíé <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞:</b>

‚ö° <b>–ë—ã—Å—Ç—Ä–æ</b> (8 —à–∞–≥–æ–≤) - ~5-10 —Å–µ–∫—É–Ω–¥
‚öôÔ∏è <b>–°—Ç–∞–Ω–¥–∞—Ä—Ç</b> (20 —à–∞–≥–æ–≤) - ~15-25 —Å–µ–∫—É–Ω–¥
"""
        
        if "high" in available_qualities:
            quality_text += "‚ú® <b>–í—ã—Å–æ–∫–æ–µ</b> (35 —à–∞–≥–æ–≤) - ~35-50 —Å–µ–∫—É–Ω–¥\n"
        
        if "ultra" in available_qualities:
            quality_text += "üíé <b>–£–ª—å—Ç—Ä–∞</b> (50 —à–∞–≥–æ–≤) - ~45-70 —Å–µ–∫—É–Ω–¥\n"
        
        quality_text += f"\nüí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> 1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
        
        await state.set_state(GenerationStates.selecting_quality)
        await callback.message.edit_text(quality_text, reply_markup=quality_keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_style_selection: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(GenerationStates.selecting_quality, F.data.startswith("quality_"))
async def process_quality_selection(callback: CallbackQuery, user: dict, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –∑–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    try:
        quality = callback.data.replace("quality_", "")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞—á–µ—Å—Ç–≤–∞
        if quality in ["high", "ultra"] and user.get('subscription_type') not in ["premium", "pro"]:
            await callback.answer(
                "‚ùå –≠—Ç–æ –∫–∞—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤", 
                show_alert=True
            )
            return
        
        if quality == "ultra" and user.get('subscription_type') != "pro":
            await callback.answer(
                "‚ùå –£–ª—å—Ç—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ—Ñ–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤",
                show_alert=True  
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        prompt = data.get('prompt', '')
        style = data.get('style', 'realistic')
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∏ —Å–ø–∏—Å–∞–Ω–∏–µ
        fresh_user = await user_crud.get_by_telegram_id(user['telegram_id'])
        if not fresh_user or fresh_user.balance <= 0:
            await callback.message.edit_text(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.",
                reply_markup=get_back_keyboard()
            )
            await state.clear()
            return
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
        new_balance = fresh_user.balance - 1
        await user_crud.update_balance(user['telegram_id'], new_balance)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        processing_keyboard = get_generation_keyboard()
        
        processing_msg = await callback.message.edit_text(
            f"üé® <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å!</b>\n\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {prompt[:120]}{'...' if len(prompt) > 120 else ''}\n"
            f"üé® <b>–°—Ç–∏–ª—å:</b> {IMAGE_STYLES.get(style, {}).get('name', style)}\n"
            f"‚öôÔ∏è <b>–ö–∞—á–µ—Å—Ç–≤–æ:</b> {QUALITY_SETTINGS.get(quality, {}).get('name', quality)}\n"
            f"üí∞ <b>–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</b> {new_balance} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\n"
            f"‚è≥ –û–ø—Ä–µ–¥–µ–ª—è—é –ø–æ–∑–∏—Ü–∏—é –≤ –æ—á–µ—Ä–µ–¥–∏...",
            reply_markup=processing_keyboard
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        size = "512x512"
        priority = False
        
        if user.get('subscription_type') == "premium":
            size = "768x768"
            priority = True
        elif user.get('subscription_type') == "pro":
            size = "1024x1024" 
            priority = True
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        generation_task = {
            "user_id": user['telegram_id'],
            "prompt": prompt,
            "style": style,
            "quality": quality,
            "size": size,
            "priority": priority,
            "message_id": processing_msg.message_id,
            "chat_id": callback.message.chat.id,
            "created_at": datetime.utcnow().isoformat(),
            "task_id": f"{user['telegram_id']}_{int(datetime.utcnow().timestamp())}"
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
        queue_name = "priority_queue" if priority else "generation_queue"
        await redis_client.add_to_generation_queue(generation_task, priority)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ –æ—á–µ—Ä–µ–¥–∏
        queue_position = await redis_client.get_queue_length(queue_name)
        estimated_time = queue_position * 25  # –ü—Ä–∏–º–µ—Ä–Ω–æ 25 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        
        await processing_msg.edit_text(
            f"üé® <b>–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!</b>\n\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {prompt[:120]}{'...' if len(prompt) > 120 else ''}\n"
            f"üé® <b>–°—Ç–∏–ª—å:</b> {IMAGE_STYLES.get(style, {}).get('name', style)}\n"
            f"‚öôÔ∏è <b>–ö–∞—á–µ—Å—Ç–≤–æ:</b> {QUALITY_SETTINGS.get(quality, {}).get('name', quality)}\n"
            f"üìê <b>–†–∞–∑–º–µ—Ä:</b> {size}\n\n"
            f"üìä <b>–ü–æ–∑–∏—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏:</b> {queue_position}\n"
            f"‚è±Ô∏è <b>–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è:</b> {estimated_time // 60}–º {estimated_time % 60}—Å\n"
            f"üí∞ <b>–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</b> {new_balance} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
            reply_markup=processing_keyboard
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        logger.info(
            f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user['telegram_id']}: "
            f"{style}/{quality}/{size}"
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_quality_selection: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏", show_alert=True)
        await state.clear()


@router.callback_query(F.data == "cancel_generation")
async def cancel_generation_handler(callback: CallbackQuery, user: dict):
    """–û—Ç–º–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–ª–∞–Ω—Å (–µ—Å–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å)
        fresh_user = await user_crud.get_by_telegram_id(user['telegram_id'])
        if fresh_user:
            await user_crud.update_balance(
                user['telegram_id'], 
                fresh_user.balance + 1
            )
        
        from src.bot.keyboards.main import get_main_keyboard
        keyboard = get_main_keyboard()
        
        await callback.message.edit_text(
            "‚ùå <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
            f"üí∞ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–æ –Ω–∞ –±–∞–ª–∞–Ω—Å\n"
            f"üíé –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {fresh_user.balance + 1} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π",
            reply_markup=keyboard
        )
        await callback.answer("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel_generation_handler: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "history")
async def history_handler(callback: CallbackQuery, user: dict):
    """–ò—Å—Ç–æ—Ä–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        generations = await generation_crud.get_user_generations(
            user['telegram_id'], 
            limit=10
        )
        
        if not generations:
            from src.bot.keyboards.main import get_main_keyboard
            keyboard = get_main_keyboard()
            
            await callback.message.edit_text(
                "üìä <b>–ò—Å—Ç–æ—Ä–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n"
                "–ù–∞—á–Ω–∏—Ç–µ —Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!",
                reply_markup=keyboard
            )
            await callback.answer()
            return
        
        history_text = "üìä <b>–ò—Å—Ç–æ—Ä–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π</b>\n\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
        for i, gen in enumerate(generations[:5], 1):
            status_emoji = {
                "completed": "‚úÖ",
                "failed": "‚ùå", 
                "processing": "‚è≥",
                "pending": "üïê"
            }.get(gen.status, "‚ùì")
            
            prompt_preview = gen.prompt[:50] + "..." if len(gen.prompt) > 50 else gen.prompt
            date_str = gen.created_at.strftime('%d.%m %H:%M')
            
            history_text += f"{i}. {status_emoji} <i>{prompt_preview}</i>\n"
            history_text += f"   üìÖ {date_str} | üé® {gen.style} | üìê {gen.size}\n\n"
        
        from src.bot.keyboards.main import get_history_keyboard
        keyboard = get_history_keyboard(has_more=len(generations) > 5)
        
        await callback.message.edit_text(history_text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ history_handler: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)