"""
–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Telegram AI Bot
"""
import logging
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.filters import Command

from src.bot.keyboards.main import get_admin_keyboard
from src.database.crud import UserCRUD, PaymentCRUD, GenerationCRUD
from src.generator.gpu_balancer import gpu_balancer
from src.generator.models_manager import model_manager
from src.shared.redis_client import redis_client
from src.shared.config import settings

logger = logging.getLogger(__name__)
router = Router()

# CRUD —Å–µ—Ä–≤–∏—Å—ã
user_crud = UserCRUD()
payment_crud = PaymentCRUD() 
generation_crud = GenerationCRUD()


def admin_required(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤"""
    async def wrapper(callback_or_message, user: dict, *args, **kwargs):
        if not user.get('is_admin', False):
            if hasattr(callback_or_message, 'answer'):
                await callback_or_message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            else:
                await callback_or_message.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏")
            return
        
        return await func(callback_or_message, user, *args, **kwargs)
    return wrapper


@router.message(Command("admin"))
@admin_required
async def admin_panel_handler(message: Message, user: dict):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    try:
        keyboard = get_admin_keyboard()
        
        admin_text = f"""
üëë <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>

üë§ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> {user['full_name']}
üÜî <b>ID:</b> <code>{user['telegram_id']}</code>
‚è∞ <b>–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}

üéõÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏  
‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
‚Ä¢ –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª ‚¨áÔ∏è
"""
        
        await message.answer(admin_text, reply_markup=keyboard)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_panel_handler: {e}")
        await message.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏")


@router.callback_query(F.data == "admin_stats")
@admin_required
async def admin_system_stats(callback: CallbackQuery, user: dict):
    """–°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        users_stats = await user_crud.get_users_statistics()
        payments_stats = await payment_crud.get_payments_statistics()
        generations_stats = await generation_crud.get_generations_statistics()
        gpu_stats = await gpu_balancer.get_gpu_stats()
        redis_stats = await redis_client.get_statistics()
        
        stats_text = f"""
üìä <b>–°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ: {users_stats.get('total_users', 0)}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {users_stats.get('active_today', 0)}
‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –Ω–µ–¥–µ–ª—é: {users_stats.get('new_week', 0)}
‚Ä¢ –ü—Ä–µ–º–∏—É–º: {users_stats.get('premium_users', 0)}

üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>
‚Ä¢ –í—Å–µ–≥–æ –¥–æ—Ö–æ–¥–æ–≤: {payments_stats.get('total_revenue', 0)}‚ÇΩ
‚Ä¢ –î–æ—Ö–æ–¥—ã —Å–µ–≥–æ–¥–Ω—è: {payments_stats.get('revenue_today', 0)}‚ÇΩ
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {payments_stats.get('successful_payments', 0)}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {payments_stats.get('average_payment', 0)}‚ÇΩ

üé® <b>–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {generations_stats.get('total_generations', 0)}
‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {generations_stats.get('generations_today', 0)}
‚Ä¢ –í –æ—á–µ—Ä–µ–¥–∏: {generations_stats.get('queue_length', 0)}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {generations_stats.get('avg_time', 0):.1f}—Å

üñ•Ô∏è <b>GPU ({gpu_stats.get('gpu_count', 0)} —à—Ç.):</b>
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ: {sum(1 for avail in gpu_stats.get('availability', {}).values() if avail)}
‚Ä¢ –í —Ä–∞–±–æ—Ç–µ: {sum(1 for avail in gpu_stats.get('availability', {}).values() if not avail)}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {gpu_stats.get('average_generation_time', 0):.1f}—Å

üîÑ <b>Redis:</b>
‚Ä¢ –°—Ç–∞—Ç—É—Å: {"‚úÖ OK" if redis_stats.get('connected') else "‚ùå Error"}
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–∞–º—è—Ç–∏: {redis_stats.get('memory_usage_mb', 0)} MB
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {redis_stats.get('connected_clients', 0)}

üïê <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> {datetime.now().strftime('%H:%M:%S')}
"""
        
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                callback_data="admin_stats"
            )],
            [InlineKeyboardButton(
                text="üìà –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
                callback_data="admin_analytics"
            )],
            [InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                callback_data="admin_panel"
            )]
        ])
        
        await callback.message.edit_text(stats_text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)


@router.callback_query(F.data == "admin_users")
@admin_required
async def admin_user_management(callback: CallbackQuery, user: dict):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        top_users = await user_crud.get_top_users(limit=10)
        recent_users = await user_crud.get_recent_users(limit=5)
        
        users_text = f"""
üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>

üìä <b>–¢–æ–ø –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º:</b>
"""
        
        for i, user_info in enumerate(top_users, 1):
            users_text += (
                f"{i}. {user_info.full_name} "
                f"({user_info.total_generations} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π)\n"
            )
        
        users_text += f"""

üëã <b>–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
"""
        
        for user_info in recent_users:
            reg_date = user_info.created_at.strftime('%d.%m %H:%M')
            users_text += (
                f"‚Ä¢ {user_info.full_name} "
                f"(—Ä–µ–≥. {reg_date})\n"
            )
        
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                callback_data="admin_find_user"
            )],
            [InlineKeyboardButton(
                text="üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                callback_data="admin_user_stats"
            )],
            [InlineKeyboardButton(
                text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ",
                callback_data="admin_blocked_users"
            )],
            [InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                callback_data="admin_panel"
            )]
        ])
        
        await callback.message.edit_text(users_text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)


@router.callback_query(F.data == "admin_finance")
@admin_required
async def admin_financial_reports(callback: CallbackQuery, user: dict):
    """–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        today_revenue = await payment_crud.get_revenue_by_period(days=1)
        week_revenue = await payment_crud.get_revenue_by_period(days=7)
        month_revenue = await payment_crud.get_revenue_by_period(days=30)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–∞–∫–µ—Ç–∞–º
        package_stats = await payment_crud.get_package_statistics()
        
        # –ö–æ–Ω–≤–µ—Ä—Å–∏—è
        conversion_stats = await payment_crud.get_conversion_statistics()
        
        finance_text = f"""
üí∞ <b>–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ—Ç—á–µ—Ç—ã</b>

üìà <b>–î–æ—Ö–æ–¥—ã:</b>
‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {today_revenue}‚ÇΩ
‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {week_revenue}‚ÇΩ  
‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: {month_revenue}‚ÇΩ

üì¶ <b>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:</b>
"""
        
        for package, stats in package_stats.items():
            package_name = {
                'once': 'üíé –†–∞–∑–æ–≤–∞—è',
                'basic': 'üì¶ –ë–∞–∑–æ–≤—ã–π',
                'premium': '‚≠ê –ü—Ä–µ–º–∏—É–º', 
                'pro': 'üî• –ü—Ä–æ—Ñ–∏'
            }.get(package, package)
            
            finance_text += (
                f"‚Ä¢ {package_name}: {stats['count']} —à—Ç. "
                f"({stats['revenue']}‚ÇΩ)\n"
            )
        
        finance_text += f"""

üìä <b>–ö–æ–Ω–≤–µ—Ä—Å–∏—è:</b>
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚Üí –ü–æ–∫—É–ø–∫–∞: {conversion_stats.get('reg_to_purchase', 0):.1f}%
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä ‚Üí –û–ø–ª–∞—Ç–∞: {conversion_stats.get('view_to_payment', 0):.1f}%
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π LTV: {conversion_stats.get('average_ltv', 0)}‚ÇΩ

üí≥ <b>–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:</b>
‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã: {conversion_stats.get('card_percentage', 0):.1f}%
‚Ä¢ –°–ë–ü: {conversion_stats.get('sbp_percentage', 0):.1f}%
‚Ä¢ –î—Ä—É–≥–∏–µ: {conversion_stats.get('other_percentage', 0):.1f}%
"""
        
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üìä –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞",
                callback_data="admin_export_finance"
            )],
            [InlineKeyboardButton(
                text="üìà –ì—Ä–∞—Ñ–∏–∫ –¥–æ—Ö–æ–¥–æ–≤",
                callback_data="admin_revenue_chart"
            )],
            [InlineKeyboardButton(
                text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                callback_data="admin_finance"
            )],
            [InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                callback_data="admin_panel"
            )]
        ])
        
        await callback.message.edit_text(finance_text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –æ—Ç—á–µ—Ç–æ–≤: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–æ–≤", show_alert=True)


@router.callback_query(F.data == "admin_generation")
@admin_required  
async def admin_generation_monitoring(callback: CallbackQuery, user: dict):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    try:
        # GPU —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        gpu_stats = await gpu_balancer.get_gpu_stats()
        model_info = model_manager.get_model_info()
        
        # –û—á–µ—Ä–µ–¥—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        queue_stats = await redis_client.get_queue_statistics()
        
        generation_text = f"""
üé® <b>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</b>

üñ•Ô∏è <b>GPU –°—Ç–∞—Ç—É—Å:</b>
"""
        
        for gpu_id, status in gpu_stats.get('gpu_status', {}).items():
            busy_status = "üî¥ –ó–∞–Ω—è—Ç" if status['busy'] else "üü¢ –°–≤–æ–±–æ–¥–µ–Ω"
            generation_text += (
                f"GPU {gpu_id}: {busy_status} "
                f"(–û—á–µ—Ä–µ–¥—å: {status['queue_length']})\n"
            )
        
        generation_text += f"""

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {gpu_stats.get('total_generations', 0)}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: {gpu_stats.get('total_generations', 0) - gpu_stats.get('total_errors', 0)}
‚Ä¢ –û—à–∏–±–æ–∫: {gpu_stats.get('total_errors', 0)}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {gpu_stats.get('average_generation_time', 0):.1f}—Å

üîÑ <b>–û—á–µ—Ä–µ–¥–∏:</b>
‚Ä¢ –û–±—ã—á–Ω–∞—è –æ—á–µ—Ä–µ–¥—å: {queue_stats.get('normal_queue', 0)}
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è: {queue_stats.get('priority_queue', 0)}
‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: {queue_stats.get('processing', 0)}

üß† <b>–ú–æ–¥–µ–ª–∏:</b>
‚Ä¢ –ó–∞–≥—Ä—É–∂–µ–Ω–æ GPU: {len(model_info.get('loaded_gpus', []))}
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {sum(usage.get('allocated_gb', 0) for usage in model_info.get('memory_usage', {}).values()):.1f} GB
"""
        
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª–∏",
                callback_data="admin_reload_models"
            )],
            [InlineKeyboardButton(
                text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥–∏",
                callback_data="admin_clear_queues"
            )],
            [InlineKeyboardButton(
                text="üìä GPU –¥–µ—Ç–∞–ª–∏",
                callback_data="admin_gpu_details"
            )],
            [InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                callback_data="admin_panel"
            )]
        ])
        
        await callback.message.edit_text(generation_text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", show_alert=True)


@router.callback_query(F.data == "admin_logs")
@admin_required
async def admin_system_logs(callback: CallbackQuery, user: dict):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
        import subprocess
        import os
        
        logs_text = "üìù <b>–°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏</b>\n\n"
        
        # –õ–æ–≥–∏ –±–æ—Ç–∞
        try:
            bot_logs = subprocess.run(
                ["tail", "-20", "logs/bot/bot.log"], 
                capture_output=True, 
                text=True,
                timeout=5
            )
            if bot_logs.returncode == 0:
                logs_text += "<b>ü§ñ Telegram Bot:</b>\n"
                logs_text += f"<code>{bot_logs.stdout[-1000:]}</code>\n\n"
        except:
            logs_text += "<b>ü§ñ Telegram Bot:</b> –õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n\n"
        
        # –õ–æ–≥–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
        try:
            gen_logs = subprocess.run(
                ["tail", "-10", "logs/generator/generator.log"],
                capture_output=True,
                text=True,
                timeout=5
            )
            if gen_logs.returncode == 0:
                logs_text += "<b>üé® AI Generator:</b>\n"
                logs_text += f"<code>{gen_logs.stdout[-500:]}</code>\n\n"
        except:
            logs_text += "<b>üé® AI Generator:</b> –õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n\n"
        
        # –õ–æ–≥–∏ –ø–ª–∞—Ç–µ–∂–µ–π
        try:
            payment_logs = subprocess.run(
                ["tail", "-10", "logs/webhook/webhook.log"],
                capture_output=True, 
                text=True,
                timeout=5
            )
            if payment_logs.returncode == 0:
                logs_text += "<b>üí≥ Payment Webhook:</b>\n"
                logs_text += f"<code>{payment_logs.stdout[-500:]}</code>"
        except:
            logs_text += "<b>üí≥ Payment Webhook:</b> –õ–æ–≥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(logs_text) > 4000:
            logs_text = logs_text[:3900] + "\n\n... (–æ–±—Ä–µ–∑–∞–Ω–æ)"
        
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üìÅ –°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–µ –ª–æ–≥–∏",
                callback_data="admin_download_logs"
            )],
            [InlineKeyboardButton(
                text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                callback_data="admin_logs"
            )],
            [InlineKeyboardButton(
                text="‚ö†Ô∏è –¢–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏",
                callback_data="admin_error_logs"
            )],
            [InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥", 
                callback_data="admin_panel"
            )]
        ])
        
        await callback.message.edit_text(logs_text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤", show_alert=True)


@router.callback_query(F.data == "admin_reload_models")
@admin_required
async def admin_reload_models(callback: CallbackQuery, user: dict):
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ AI –º–æ–¥–µ–ª–µ–π"""
    try:
        await callback.message.edit_text(
            "üîÑ <b>–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π...</b>\n\n"
            "‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç..."
        )
        
        # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥–µ–ª–∏
        await model_manager.cleanup_models()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ –∑–∞–Ω–æ–≤–æ
        load_results = await model_manager.load_models_on_gpus()
        
        success_count = sum(1 for success in load_results.values() if success)
        total_count = len(load_results)
        
        result_text = f"""
‚úÖ <b>–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>

üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b>
‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {success_count}/{total_count} GPU
‚Ä¢ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}

üñ•Ô∏è <b>GPU —Å—Ç–∞—Ç—É—Å:</b>
"""
        
        for gpu_id, success in load_results.items():
            status = "‚úÖ OK" if success else "‚ùå –û—à–∏–±–∫–∞"
            result_text += f"GPU {gpu_id}: {status}\n"
        
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É",
                callback_data="admin_generation"
            )]
        ])
        
        await callback.message.edit_text(result_text, reply_markup=keyboard)
        await callback.answer("–ú–æ–¥–µ–ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏", show_alert=True)


@router.callback_query(F.data == "admin_clear_queues")
@admin_required 
async def admin_clear_queues(callback: CallbackQuery, user: dict):
    """–û—á–∏—Å—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
    try:
        # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥–∏ –≤ Redis
        await redis_client.clear_generation_queues()
        
        result_text = f"""
‚úÖ <b>–û—á–µ—Ä–µ–¥–∏ –æ—á–∏—â–µ–Ω—ã</b>

üîÑ <b>–î–µ–π—Å—Ç–≤–∏—è:</b>
‚Ä¢ –û–±—ã—á–Ω–∞—è –æ—á–µ—Ä–µ–¥—å: –æ—á–∏—â–µ–Ω–∞
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ—á–µ—Ä–µ–¥—å: –æ—á–∏—â–µ–Ω–∞  
‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–µ –∑–∞–¥–∞—á–∏: —Å–±—Ä–æ—à–µ–Ω—ã

‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M:%S')}

‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b>
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–¥–∞—á.
"""
        
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É",
                callback_data="admin_generation"
            )]
        ])
        
        await callback.message.edit_text(result_text, reply_markup=keyboard)
        await callback.answer("–û—á–µ—Ä–µ–¥–∏ –æ—á–∏—â–µ–Ω—ã!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π", show_alert=True)


@router.callback_query(F.data == "admin_panel")
@admin_required
async def back_to_admin_panel(callback: CallbackQuery, user: dict):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏"""
    try:
        keyboard = get_admin_keyboard()
        
        admin_text = f"""
üëë <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>

üë§ <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> {user['full_name']}
‚è∞ <b>–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M')}

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª ‚¨áÔ∏è
"""
        
        await callback.message.edit_text(admin_text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", show_alert=True)