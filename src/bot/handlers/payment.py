"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π –≤ Telegram –±–æ—Ç–µ
"""
import logging
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from src.bot.keyboards.payment import (
    get_buy_packages_keyboard, get_package_details_keyboard,
    get_payment_processing_keyboard, get_payment_success_keyboard,
    get_payment_failed_keyboard, get_payment_history_keyboard
)
from src.database.crud import UserCRUD, PaymentCRUD
from src.payment.providers.yookassa import YooKassaProvider
from src.shared.config import PACKAGES, settings
from src.shared.redis_client import redis_client

logger = logging.getLogger(__name__)
router = Router()

# –°–µ—Ä–≤–∏—Å—ã
user_crud = UserCRUD()
payment_crud = PaymentCRUD()
yookassa_provider = YooKassaProvider()


# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
class PaymentStates(StatesGroup):
    selecting_package = State()
    selecting_method = State()
    processing_payment = State()
    entering_promo_code = State()


@router.callback_query(F.data == "buy_images")
async def buy_images_handler(callback: CallbackQuery, user: dict):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–∫—É–ø–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    try:
        keyboard = get_buy_packages_keyboard()
        
        packages_text = f"""
üí≥ <b>–ö—É–ø–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏</b>

üë§ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {user['balance']} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

üéØ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:</b>

üíé <b>–†–∞–∑–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è - 49‚ÇΩ</b>
‚Ä¢ 1 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
‚Ä¢ –û–±—ã—á–Ω–∞—è –æ—á–µ—Ä–µ–¥—å
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ Standard
‚Ä¢ –†–∞–∑–º–µ—Ä 512x512

üì¶ <b>–ë–∞–∑–æ–≤—ã–π –ø–∞–∫–µ—Ç - 299‚ÇΩ</b>
‚Ä¢ 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 30 –¥–Ω–µ–π
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ Standard
‚Ä¢ –†–∞–∑–º–µ—Ä 512x512

‚≠ê <b>–ü—Ä–µ–º–∏—É–º –ø–∞–∫–µ—Ç - 599‚ÇΩ</b>
‚Ä¢ 25 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ—á–µ—Ä–µ–¥—å
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ High
‚Ä¢ –†–∞–∑–º–µ—Ä 768x768
‚Ä¢ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 60 –¥–Ω–µ–π

üî• <b>–ü—Ä–æ—Ñ–∏ –ø–∞–∫–µ—Ç - 1299‚ÇΩ</b>
‚Ä¢ 60 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
‚Ä¢ –ë–µ–∑ –æ—á–µ—Ä–µ–¥–∏ (–º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è)
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ Ultra
‚Ä¢ –†–∞–∑–º–µ—Ä 1024x1024
‚Ä¢ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: 90 –¥–Ω–µ–π

üîí <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>
‚Ä¢ PCI DSS Level 1 –∑–∞—â–∏—Ç–∞
‚Ä¢ –§–∏—Å–∫–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ 54-–§–ó
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —á–µ–∫–∏ –Ω–∞ email
‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π

–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç ‚¨áÔ∏è
"""
        
        await callback.message.edit_text(packages_text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ buy_images_handler: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("buy_"))
async def package_selection_handler(callback: CallbackQuery, user: dict, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞"""
    try:
        package = callback.data.replace("buy_", "")
        
        if package not in PACKAGES:
            await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞–∫–µ—Ç", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç
        await state.update_data(selected_package=package)
        
        package_info = PACKAGES[package]
        keyboard = get_package_details_keyboard(package)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞
        features_text = ""
        if package == "premium":
            features_text = """
‚úÖ <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ü—Ä–µ–º–∏—É–º:</b>
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ—á–µ—Ä–µ–¥—å (–≤ 3 —Ä–∞–∑–∞ –±—ã—Å—Ç—Ä–µ–µ)
‚Ä¢ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (35 —à–∞–≥–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏)
‚Ä¢ –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π 768x768
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö —Å—Ç–∏–ª–µ–π
‚Ä¢ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ
"""
        elif package == "pro":
            features_text = """
‚úÖ <b>–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ü—Ä–æ—Ñ–∏:</b>
‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è (–±–µ–∑ –æ—á–µ—Ä–µ–¥–∏)
‚Ä¢ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (50 —à–∞–≥–æ–≤)
‚Ä¢ –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π 1024x1024
‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Å—Ç–∏–ª–∏
‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞—Ç—å custom –º–æ–¥–µ–ª—å
"""
        
        package_text = f"""
üì¶ <b>{package_info['name']}</b>

üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {package_info['price']}‚ÇΩ
üé® <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:</b> {package_info['images']}
‚è±Ô∏è <b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> {package_info.get('duration', '–ù–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω')}
üìè <b>–†–∞–∑–º–µ—Ä:</b> {package_info.get('size', '512x512')}
‚öôÔ∏è <b>–ö–∞—á–µ—Å—Ç–≤–æ:</b> {package_info.get('quality', 'Standard')}

{features_text}

üîí <b>–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:</b>
‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã (Visa/MC/–ú–ò–†)
‚Ä¢ –°–ë–ü - –°–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π  
‚Ä¢ SberPay
‚Ä¢ –ÆMoney

üßæ <b>–î–æ–∫—É–º–µ–Ω—Ç—ã:</b>
‚Ä¢ –§–∏—Å–∫–∞–ª—å–Ω—ã–π —á–µ–∫ –ø–æ 54-–§–ó
‚Ä¢ –°–ø—Ä–∞–≤–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ
‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π

–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã ‚¨áÔ∏è
"""
        
        await callback.message.edit_text(package_text, reply_markup=keyboard)
        await state.set_state(PaymentStates.selecting_method)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ package_selection_handler: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(PaymentStates.selecting_method, F.data.startswith("pay_"))
async def payment_method_handler(callback: CallbackQuery, user: dict, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    try:
        # –ü–∞—Ä—Å–∏–º callback_data: pay_{package}_{method}
        data_parts = callback.data.split("_")
        if len(data_parts) != 3:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
        
        _, package, method = data_parts
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        selected_package = state_data.get('selected_package')
        
        if package != selected_package:
            await callback.answer("–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã
        await state.update_data(payment_method=method)
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        processing_msg = await callback.message.edit_text(
            "üí≥ <b>–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞...</b>\n\n"
            "‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
            reply_markup=None
        )
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –ÆKassa
            payment_result = await yookassa_provider.create_payment(
                user_id=user['telegram_id'],
                package=package,
                method=method,
                return_url=f"{settings.BOT_WEBHOOK_URL}/webapp/success"
            )
            
            if not payment_result or not payment_result.get('success'):
                raise Exception(payment_result.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞'))
            
            payment_id = payment_result['payment_id']
            confirmation_url = payment_result['confirmation_url']
            amount = payment_result['amount']
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.update_data(payment_id=payment_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
            method_instructions = {
                'card': 'üí≥ –û–ø–ª–∞—Ç–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π',
                'sbp': 'üì± –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –°–ë–ü',
                'sberpay': 'üü¢ –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ SberPay',
                'yoomoney': 'üü° –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –ÆMoney'
            }
            
            keyboard = get_payment_processing_keyboard(payment_id)
            
            payment_text = f"""
üí≥ <b>–ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!</b>

üì¶ <b>–ü–∞–∫–µ—Ç:</b> {PACKAGES[package]['name']}
üí∞ <b>–°—É–º–º–∞:</b> {amount}‚ÇΩ
üî¢ <b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> <code>{payment_id}</code>
üîÑ <b>–°–ø–æ—Å–æ–±:</b> {method_instructions.get(method, method)}

üîó <b>–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ</b>

‚è±Ô∏è <b>–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É:</b> 15 –º–∏–Ω—É—Ç
üîí <b>–ü–ª–∞—Ç–µ–∂ –∑–∞—â–∏—â–µ–Ω –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É PCI DSS</b>

–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤—è—Ç—Å—è –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.
"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            payment_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å",
                    url=confirmation_url
                )],
                [InlineKeyboardButton(
                    text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å",
                    callback_data=f"check_payment_{payment_id}"
                )],
                [InlineKeyboardButton(
                    text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂",
                    callback_data=f"cancel_payment_{payment_id}"
                )]
            ])
            
            await processing_msg.edit_text(payment_text, reply_markup=payment_keyboard)
            await state.set_state(PaymentStates.processing_payment)
            await callback.answer()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
            
            error_text = f"""
‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞</b>

–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂: {str(e)}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
‚Ä¢ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
‚Ä¢ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É

–°—Ä–µ–¥—Å—Ç–≤–∞ –Ω–µ –±—ã–ª–∏ —Å–ø–∏—Å–∞–Ω—ã.
"""
            
            from src.bot.keyboards.main import get_back_keyboard
            keyboard = get_back_keyboard()
            
            await processing_msg.edit_text(error_text, reply_markup=keyboard)
            await state.clear()
            await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ payment_method_handler: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("check_payment_"))
async def check_payment_status(callback: CallbackQuery, user: dict):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        payment_id = callback.data.replace("check_payment_", "")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
        payment = await payment_crud.get_by_payment_id(payment_id)
        
        if not payment:
            await callback.answer("–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤ –ÆKassa
        status_result = await yookassa_provider.check_payment_status(payment_id)
        
        if status_result and status_result.get('status') == 'succeeded':
            # –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω
            package_info = PACKAGES.get(payment.package_type, {})
            images_count = package_info.get('images', 1)
            
            success_text = f"""
‚úÖ <b>–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>

üì¶ <b>–ü–∞–∫–µ—Ç:</b> {package_info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}
üí∞ <b>–°—É–º–º–∞:</b> {payment.amount}‚ÇΩ
üé® <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–æ:</b> {images_count}

üíé <b>–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:</b> {user['balance'] + images_count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

üßæ –ß–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email
üìß ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: <code>{payment_id}</code>

–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!
"""
            
            keyboard = get_payment_success_keyboard()
            await callback.message.edit_text(success_text, reply_markup=keyboard)
            
        elif status_result and status_result.get('status') in ['canceled', 'failed']:
            # –ü–ª–∞—Ç–µ–∂ –Ω–µ—É—Å–ø–µ—à–µ–Ω
            error_reason = status_result.get('cancellation_details', {}).get('reason', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞')
            
            failed_text = f"""
‚ùå <b>–ü–ª–∞—Ç–µ–∂ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω</b>

üî¢ <b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> <code>{payment_id}</code>
‚ö†Ô∏è <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {error_reason}

üí∞ –°—Ä–µ–¥—Å—Ç–≤–∞ –Ω–µ –±—ã–ª–∏ —Å–ø–∏—Å–∞–Ω—ã
‚è∞ –ú–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ–ø–ª–∞—Ç–∏—Ç—å –µ—â–µ —Ä–∞–∑

–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
"""
            
            keyboard = get_payment_failed_keyboard(payment_id)
            await callback.message.edit_text(failed_text, reply_markup=keyboard)
            
        else:
            # –ü–ª–∞—Ç–µ–∂ –≤—Å–µ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
            await callback.answer(
                "–ü–ª–∞—Ç–µ–∂ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.",
                show_alert=True
            )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)


@router.callback_query(F.data.startswith("cancel_payment_"))
async def cancel_payment_handler(callback: CallbackQuery, user: dict):
    """–û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        payment_id = callback.data.replace("cancel_payment_", "")
        
        # –û—Ç–º–µ–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa
        cancel_result = await yookassa_provider.cancel_payment(payment_id)
        
        if cancel_result and cancel_result.get('success'):
            cancel_text = f"""
‚ùå <b>–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω</b>

üî¢ <b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> <code>{payment_id}</code>

‚úÖ –°—Ä–µ–¥—Å—Ç–≤–∞ –Ω–µ –±—ã–ª–∏ —Å–ø–∏—Å–∞–Ω—ã
üí≥ –ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã

–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
"""
        else:
            cancel_text = f"""
‚ö†Ô∏è <b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂</b>

üî¢ <b>ID –ø–ª–∞—Ç–µ–∂–∞:</b> <code>{payment_id}</code>

–í–æ–∑–º–æ–∂–Ω–æ, –ø–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.
–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
"""
        
        from src.bot.keyboards.main import get_back_keyboard
        keyboard = get_back_keyboard()
        
        await callback.message.edit_text(cancel_text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)


@router.callback_query(F.data == "payment_history")
async def payment_history_handler(callback: CallbackQuery, user: dict):
    """–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        payments = await payment_crud.get_user_payments(user['telegram_id'], limit=10)
        
        if not payments:
            history_text = f"""
üìã <b>–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π</b>

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π.
–ö—É–ø–∏—Ç–µ –ø–µ—Ä–≤—ã–π –ø–∞–∫–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π!
"""
        else:
            history_text = f"""
üìã <b>–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user['full_name']}
üí∞ <b>–û–±—â–∞—è —Å—É–º–º–∞:</b> {user['total_spent']}‚ÇΩ

<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏:</b>
"""
            
            for i, payment in enumerate(payments, 1):
                status_emoji = {
                    "succeeded": "‚úÖ",
                    "pending": "‚è≥", 
                    "canceled": "‚ùå",
                    "failed": "‚ùå"
                }.get(payment.status.value, "‚ùì")
                
                date_str = payment.created_at.strftime('%d.%m.%Y %H:%M')
                package_name = PACKAGES.get(payment.package_type, {}).get('name', payment.package_type)
                
                history_text += (
                    f"\n{i}. {status_emoji} <b>{package_name}</b>\n"
                    f"   üí∞ {payment.amount}‚ÇΩ ‚Ä¢ üìÖ {date_str}\n"
                    f"   üî¢ <code>{payment.payment_id}</code>"
                )
                
                if i >= 5:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
                    break
        
        keyboard = get_payment_history_keyboard()
        await callback.message.edit_text(history_text, reply_markup=keyboard)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ payment_history_handler: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data == "payment_support")
async def payment_support_handler(callback: CallbackQuery, user: dict):
    """–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º"""
    support_text = f"""
üí¨ <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º</b>

üìû <b>–°–ø–æ—Å–æ–±—ã —Å–≤—è–∑–∏:</b>
‚Ä¢ Telegram: @ai_support_bot
‚Ä¢ Email: support@aibot.ru
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +7 (495) 123-45-67

üïê <b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b>
–ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ, 24/7

üìã <b>–î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è —É–∫–∞–∂–∏—Ç–µ:</b>
‚Ä¢ –í–∞—à ID: <code>{user['telegram_id']}</code>
‚Ä¢ ID –ø–ª–∞—Ç–µ–∂–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
‚Ä¢ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã

‚ö° <b>–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>
‚Ä¢ –î–µ–Ω—å–≥–∏ —Å–ø–∏—Å–∞–ª–∏—Å—å, –Ω–æ –±–∞–ª–∞–Ω—Å –Ω–µ –ø–æ–ø–æ–ª–Ω–∏–ª—Å—è
‚Ä¢ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –∫–∞—Ä—Ç–æ–π
‚Ä¢ –ù–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç —á–µ–∫
‚Ä¢ –í–æ–ø—Ä–æ—Å—ã –≤–æ–∑–≤—Ä–∞—Ç–∞

üîí <b>–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:</b>
–ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–æ–æ–±—â–∞–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É!
"""
    
    from src.bot.keyboards.main import get_back_keyboard
    keyboard = get_back_keyboard()
    
    await callback.message.edit_text(support_text, reply_markup=keyboard)
    await callback.answer()