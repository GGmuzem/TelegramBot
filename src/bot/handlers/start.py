"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
"""
import logging
from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery

from src.bot.keyboards.main import get_main_keyboard
from src.database.crud import UserCRUD, GenerationCRUD
from src.payment.service import payment_service

logger = logging.getLogger(__name__)
router = Router()

user_crud = UserCRUD()

@router.message(CommandStart())
async def start_handler(message: Message, user: dict):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        keyboard = get_main_keyboard()
        tariffs = await payment_service.get_tariffs()
        tariffs_text = "\n".join([f"- {t.name} ({t.price}‚ÇΩ)" for t in tariffs])
        
        welcome_text = f"""ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!</b>

üëã –ü—Ä–∏–≤–µ—Ç, <b>{user['first_name']}</b>!

–í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']} –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:
{tariffs_text}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
        
        await message.answer(welcome_text, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_handler: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ.")

@router.callback_query(F.data == "back_to_main")
async def back_to_main_handler(callback: CallbackQuery, user: dict):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        keyboard = get_main_keyboard()
        main_menu_text = f"""üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>

üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {user['balance']} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
        await callback.message.edit_text(main_menu_text, reply_markup=keyboard)
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ back_to_main_handler: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

@router.message(Command("history"))
@router.callback_query(F.data == "history")
async def history_handler(message: Message | CallbackQuery, user: dict):
    """–ò—Å—Ç–æ—Ä–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π"""
    generation_crud = GenerationCRUD()
    generations = await generation_crud.get_user_generations(user['telegram_id'], limit=5)
    
    if not generations:
        text = "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π."
    else:
        text = "<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –≥–µ–Ω–µ—Ä–∞—Ü–∏–π:</b>\n\n"
        for gen in generations:
            text += f"- <code>{gen.prompt[:30]}...</code> ({gen.status})\n"

    if isinstance(message, CallbackQuery):
        await message.message.edit_text(text)
    else:
        await message.answer(text)

@router.message(Command("support"))
@router.callback_query(F.data == "support")
async def support_handler(message: Message | CallbackQuery, user: dict):
    """–ü–æ–¥–¥–µ—Ä–∂–∫–∞"""
    text = f"""üí¨ <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>

–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏: @ai_support_bot
–í–∞—à ID: <code>{user['telegram_id']}</code>"""
    if isinstance(message, CallbackQuery):
        await message.message.edit_text(text)
    else:
        await message.answer(text)