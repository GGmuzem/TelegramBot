"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª Telegram –±–æ—Ç–∞ - —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞
"""
import asyncio
import logging
from aiohttp import web

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.redis import RedisStorage
from aiogram.webhook.aiohttp_server import SimpleRequestHandler
from aiogram.types import URLInputFile
import json

from redis.asyncio import Redis

# –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π –±–æ—Ç–∞
from src.bot.handlers import start, payment, generation, admin
from src.bot.middlewares.auth import AuthMiddleware
from src.bot.middlewares.rate_limit import RateLimitMiddleware
from src.shared.config import settings
from src.shared.redis_client import redis_client
from src.database.connection import init_database
from src.bot.webapp.routes import setup_webapp_routes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, settings.LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class TelegramBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞"""
    
    def __init__(self):
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞
        self.bot = Bot(
            token=settings.BOT_TOKEN,
            default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )
        
        # Redis storage –¥–ª—è FSM
        self.redis_storage = RedisStorage(
            redis=Redis.from_url(settings.REDIS_URL)
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        self.dp = Dispatcher(storage=self.redis_storage)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è middleware
        self._setup_middlewares()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è handlers
        self._setup_handlers()

        # –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.results_listener_task = None
    
    def _setup_middlewares(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware"""
        # Middleware –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        self.dp.message.middleware(AuthMiddleware())
        self.dp.callback_query.middleware(AuthMiddleware())
        
        # Middleware –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
        self.dp.message.middleware(RateLimitMiddleware())
        self.dp.callback_query.middleware(RateLimitMiddleware())
    
    def _setup_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã –∏–∑ handlers
        self.dp.include_routers(
            start.router,
            payment.router,
            generation.router,
            admin.router
        )
    
    async def results_listener(self):
        logger.info("Starting results listener...")
        while True:
            try:
                result_raw = await redis_client.redis.brpop("results_queue")
                if result_raw:
                    _, result_data_str = result_raw
                    result_data = json.loads(result_data_str)
                    
                    chat_id = result_data['chat_id']
                    prompt = result_data['prompt']
                    image_url = result_data['image_url']
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    image = URLInputFile(image_url)
                    await self.bot.send_photo(
                        chat_id=chat_id,
                        photo=image,
                        caption=f"‚úÖ –í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É ¬´{prompt[:50]}...¬ª –≥–æ—Ç–æ–≤–æ!"
                    )
            except Exception as e:
                logger.error(f"Error in results_listener: {e}")
            await asyncio.sleep(1)

    async def on_startup(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis
            await redis_client.connect()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            await init_database()
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
            if settings.ENVIRONMENT == "production":
                webhook_url = f"{settings.BOT_WEBHOOK_URL}/webhook/telegram"
                await self.bot.set_webhook(
                    url=webhook_url,
                    drop_pending_updates=True,
                    secret_token=settings.WEBHOOK_SECRET
                )
                logger.info(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.results_listener_task = asyncio.create_task(self.results_listener())
            
            logger.info("üöÄ Telegram Bot —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            raise
    
    async def on_shutdown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"""
        try:
            await self.bot.delete_webhook()
            await self.dp.fsm.storage.close()
            await redis_client.disconnect()

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—è
            if self.results_listener_task:
                self.results_listener_task.cancel()

            logger.info("üõë Telegram Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {e}")
    
    def create_app(self) -> web.Application:
        """–°–æ–∑–¥–∞–Ω–∏–µ AIOHTTP –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        app = web.Application()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook handler –¥–ª—è Telegram
        webhook_requests_handler = SimpleRequestHandler(
            dispatcher=self.dp,
            bot=self.bot,
            secret_token=settings.WEBHOOK_SECRET,
        )
        webhook_requests_handler.register(app, path="/webhook/telegram")
        
        # Health check endpoint
        async def health_check(request):
            return web.json_response({
                "status": "ok", 
                "timestamp": "2025-09-19T18:55:00Z"
            })
        
        app.router.add_get('/health', health_check)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webapp –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
        setup_webapp_routes(app)
        
        # –°–æ–±—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app.on_startup.append(lambda app: asyncio.create_task(self.on_startup()))
        app.on_cleanup.append(lambda app: asyncio.create_task(self.on_shutdown()))
        
        return app
    
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)"""
        await self.on_startup()
        try:
            await self.dp.start_polling(self.bot)
        finally:
            await self.on_shutdown()


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    bot_instance = TelegramBot()
    
    if settings.ENVIRONMENT == "development":
        # –†–µ–∂–∏–º polling –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        await bot_instance.start_polling()
    else:
        # –†–µ–∂–∏–º webhook –¥–ª—è production
        app = bot_instance.create_app()
        web.run_app(
            app,
            host="0.0.0.0",
            port=8000,
            access_log=logger
        )


if __name__ == "__main__":
    asyncio.run(main())