#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–µ–ø–ª–æ—è Telegram AI Bot
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./deploy.sh [development|production]

set -e

ENVIRONMENT=${1:-development}
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"

cd "$PROJECT_DIR"

echo "üöÄ –î–µ–ø–ª–æ–π Telegram AI Bot –≤ —Ä–µ–∂–∏–º–µ: $ENVIRONMENT"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
if [ ! -f ".env" ]; then
    echo "‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    echo "–°–∫–æ–ø–∏—Ä—É–π—Ç–µ .env.example –≤ .env –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
    exit 1
fi

if [ ! -d "ssl" ]; then
    echo "‚ö†Ô∏è –ü–∞–ø–∫–∞ ssl –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã..."
    mkdir -p ssl
    ./scripts/init_ssl.sh localhost
fi

# –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
echo "üìÅ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
mkdir -p logs/{nginx,bot,webhook,generator}
mkdir -p data/{postgres,redis,minio,prometheus,grafana}
mkdir -p backup
mkdir -p models
mkdir -p static

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
echo "üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞..."
chmod -R 755 data/
chmod -R 755 logs/
chmod 600 ssl/key.pem 2>/dev/null || true
chmod 644 ssl/cert.pem 2>/dev/null || true

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
    exit 1
fi

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
if [ "$ENVIRONMENT" == "production" ]; then
    docker-compose -f docker-compose.prod.yml down --remove-orphans || true
else
    docker-compose down --remove-orphans || true
fi

# –û—á–∏—â–∞–µ–º Docker –∫–µ—à
echo "üßπ –û—á–∏—Å—Ç–∫–∞ Docker –∫–µ—à–∞..."
docker system prune -f

# –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑—ã
echo "üî® –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."
if [ "$ENVIRONMENT" == "production" ]; then
    docker-compose -f docker-compose.prod.yml build --no-cache
else
    docker-compose build --no-cache
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º RTX 5080 –∏ CUDA
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ GPU..."
if command -v nvidia-smi &> /dev/null; then
    echo "GPU —Å—Ç–∞—Ç—É—Å:"
    nvidia-smi --query-gpu=name,driver_version,memory.total --format=csv
else
    echo "‚ö†Ô∏è NVIDIA –¥—Ä–∞–π–≤–µ—Ä—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã"
fi

# –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
echo "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
if [ "$ENVIRONMENT" == "production" ]; then
    docker-compose -f docker-compose.prod.yml up -d
else
    docker-compose up -d
fi

# –û–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
echo "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
sleep 30

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
echo "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
if [ "$ENVIRONMENT" == "production" ]; then
    docker-compose -f docker-compose.prod.yml ps
else
    docker-compose ps
fi

# Health checks
echo "üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL..."
docker exec telegram_bot_db$([ "$ENVIRONMENT" == "production" ] && echo "_prod") pg_isready -U bot_user || echo "‚ö†Ô∏è PostgreSQL –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis
echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ Redis..."
docker exec telegram_bot_redis$([ "$ENVIRONMENT" == "production" ] && echo "_prod") redis-cli ping || echo "‚ö†Ô∏è Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º MinIO
echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ MinIO..."
curl -f http://localhost:9000/minio/health/live || echo "‚ö†Ô∏è MinIO –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Nginx
echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ Nginx..."
curl -f http://localhost/health || echo "‚ö†Ô∏è Nginx –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
echo "üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
sleep 10
docker exec telegram_bot$([ "$ENVIRONMENT" == "production" ] && echo "_prod") python -c "
import asyncio
from database_crud import init_database
asyncio.run(init_database())
print('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞')
" || echo "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î"

# –ó–∞–≥—Ä—É–∂–∞–µ–º AI –º–æ–¥–µ–ª–∏
echo "ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ AI –º–æ–¥–µ–ª–µ–π..."
if [ ! -f "models/.models_downloaded" ]; then
    echo "–ó–∞–≥—Ä—É–∂–∞–µ–º AI –º–æ–¥–µ–ª–∏ (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)..."
    docker exec ai_generator$([ "$ENVIRONMENT" == "production" ] && echo "_prod") python -c "
from ai_generator_service import ModelManager
import asyncio
async def download_models():
    manager = ModelManager()
    await manager.load_models_on_gpus()
    print('–ú–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
try:
    asyncio.run(download_models())
except Exception as e:
    print(f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–µ–π: {e}')
" && touch models/.models_downloaded
fi

echo ""
echo "üéâ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω!"
echo ""
echo "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–∞—Ö:"
echo "‚Ä¢ Telegram Bot: http://localhost:8000"
echo "‚Ä¢ Payment Webhook: http://localhost:8001"
echo "‚Ä¢ MinIO Console: http://localhost:9001"
echo "‚Ä¢ Prometheus: http://localhost:9090"
echo "‚Ä¢ Grafana: http://localhost:3000 (admin/$(grep GRAFANA_PASSWORD .env | cut -d'=' -f2))"
echo ""
echo "üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:"
if [ "$ENVIRONMENT" == "production" ]; then
    echo "docker-compose -f docker-compose.prod.yml logs -f"
else
    echo "docker-compose logs -f"
fi
echo ""
echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞:"
if [ "$ENVIRONMENT" == "production" ]; then
    echo "docker-compose -f docker-compose.prod.yml down"
else
    echo "docker-compose down"
fi
echo ""
echo "üîç –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞:"
echo "docker logs -f <container_name>"

# –°–æ–∑–¥–∞–µ–º systemd —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
if [ "$ENVIRONMENT" == "production" ] && command -v systemctl &> /dev/null; then
    read -p "–°–æ–∑–¥–∞—Ç—å systemd —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        sudo tee /etc/systemd/system/telegram-ai-bot.service > /dev/null <<EOF
[Unit]
Description=Telegram AI Bot
Requires=docker.service
After=docker.service

[Service]
Type=oneshot
RemainAfterExit=yes
WorkingDirectory=$PROJECT_DIR
ExecStart=/usr/local/bin/docker-compose -f docker-compose.prod.yml up -d
ExecStop=/usr/local/bin/docker-compose -f docker-compose.prod.yml down
TimeoutStartSec=0

[Install]
WantedBy=multi-user.target
EOF
        sudo systemctl daemon-reload
        sudo systemctl enable telegram-ai-bot.service
        echo "‚úÖ Systemd —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω –∏ –≤–∫–ª—é—á–µ–Ω"
    fi
fi
