# Dockerfile для AI Generator с поддержкой RTX 5080
FROM nvidia/cuda:12.1.1-devel-ubuntu22.04

# Устанавливаем базовые инструменты и Python 3.11
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    cmake \
    git \
    curl \
    wget \
    python3.11 \
    python3.11-dev \
    python3.11-venv \
    python3-pip \
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    libavcodec-dev \
    libavformat-dev \
    libswscale-dev \
    libv4l-dev \
    libxvidcore-dev \
    libx264-dev \
    libgtk-3-dev \
    libatlas-base-dev \
    gfortran \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Копируем скрипт настройки GPU (для будущих архитектур)
COPY scripts/setup_rtx5080.sh /app/scripts/setup_rtx5080.sh
RUN chmod +x /app/scripts/setup_rtx5080.sh

# Создаем символическую ссылку для python
RUN ln -s /usr/bin/python3.11 /usr/bin/python

# Обновляем pip
RUN python -m pip install --upgrade pip

# Создаем рабочую директорию
WORKDIR /app

# Копируем requirements
COPY requirements.txt .

# Устанавливаем остальные зависимости
RUN pip install --no-cache-dir -r requirements.txt

# Создаем директории для моделей
RUN mkdir -p /app/models /app/logs

# Создаем пользователя
RUN adduser --disabled-password --gecos '' --shell /bin/bash user \
    && chown -R user:user /app
USER user

# Копируем код
COPY --chown=user:user ./src /app/src

# Переменные окружения
ENV PYTHONPATH=/app
ENV PYTHONUNBUFFERED=1
ENV CUDA_VISIBLE_DEVICES=0,1,2
ENV TORCH_CUDA_ARCH_LIST="7.0;7.5;8.0;8.6;8.9;9.0;12.0"

# Открываем порты для мониторинга
EXPOSE 8002

# Команда запуска
CMD ["celery", "-A", "src.shared.celery_app", "worker", "--loglevel=info"]
